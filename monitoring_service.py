"""
Service de surveillance pour les cryptomonnaies.
"""
import time
import threading
import logging
import schedule
from datetime import datetime, timedelta
import pytz
from typing import List, Dict, Any, Optional

import config
from signal_detector.detector import SignalDetector
from discord_notifier.notifier import DiscordNotifier
from data_fetcher.fetcher import DataFetcher

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format=config.LOG_CONFIG["format"],
    filename=config.LOG_CONFIG["file"]
)
logger = logging.getLogger(__name__)

class MonitoringService:
    """
    Service de surveillance pour les cryptomonnaies.
    """
    
    def __init__(self, signal_detector: SignalDetector, discord_notifier: DiscordNotifier):
        """
        Initialise le service de surveillance.
        
        Args:
            signal_detector: Instance de SignalDetector
            discord_notifier: Instance de DiscordNotifier
        """
        self.signal_detector = signal_detector
        self.discord_notifier = discord_notifier
        self.data_fetcher = DataFetcher()
        self.is_running = False
        self.monitoring_thread = None
        self.symbols_to_monitor = config.CRYPTO_TICKERS
        self.timeframe = "1d"
        self.last_signals = {}
        self.last_update_time = {}
        self.utc_tz = pytz.timezone('UTC')
        self.setup_schedule()
        logger.info("Service de surveillance initialis√©")
    
    def setup_schedule(self):
        """
        Configure les t√¢ches planifi√©es.
        """
        # Mise √† jour des donn√©es toutes les 12h
        schedule.every(12).hours.do(self.update_all_crypto_data)
        
        # V√©rification des signaux toutes les heures
        schedule.every(1).hours.do(self.check_signals)
        
        # V√©rification de l'√©tat du service toutes les 24h
        schedule.every(24).hours.do(self.send_status_report)
        
        logger.info("T√¢ches planifi√©es configur√©es")
    
    def update_all_crypto_data(self):
        """
        Met √† jour les donn√©es de toutes les cryptomonnaies.
        """
        logger.info("Mise √† jour des donn√©es de toutes les cryptomonnaies...")
        
        updated_count = 0
        error_count = 0
        
        for symbol in self.symbols_to_monitor:
            try:
                # V√©rifier si la mise √† jour est n√©cessaire
                if self._should_update_data(symbol):
                    logger.info(f"Mise √† jour des donn√©es pour {symbol}...")
                    data = self.data_fetcher.get_ticker_data(symbol, self.timeframe, force_refresh=True)
                    
                    if not data.empty:
                        self.last_update_time[symbol] = datetime.now(self.utc_tz)
                        updated_count += 1
                    else:
                        logger.warning(f"Aucune donn√©e r√©cup√©r√©e pour {symbol}")
                        error_count += 1
                else:
                    logger.debug(f"Pas besoin de mettre √† jour les donn√©es pour {symbol}")
            except Exception as e:
                logger.error(f"Erreur lors de la mise √† jour des donn√©es pour {symbol}: {e}")
                error_count += 1
            
            # Pause pour √©viter de surcharger l'API
            time.sleep(1)
        
        logger.info(f"Mise √† jour termin√©e: {updated_count} symboles mis √† jour, {error_count} erreurs")
    
    def _should_update_data(self, symbol: str) -> bool:
        """
        D√©termine si les donn√©es d'un symbole doivent √™tre mises √† jour.
        
        Args:
            symbol: Symbole de la cryptomonnaie
            
        Returns:
            True si les donn√©es doivent √™tre mises √† jour, False sinon
        """
        # Si le symbole n'a jamais √©t√© mis √† jour, le mettre √† jour
        if symbol not in self.last_update_time:
            return True
        
        # Calculer le temps √©coul√© depuis la derni√®re mise √† jour
        now = datetime.now(self.utc_tz)
        elapsed_time = now - self.last_update_time[symbol]
        
        # Mettre √† jour si le temps √©coul√© est sup√©rieur √† l'intervalle minimum
        min_interval = timedelta(hours=config.UPDATE_CONFIG["min_update_interval_hours"])
        return elapsed_time > min_interval
    
    def check_signals(self):
        """
        V√©rifie les signaux pour toutes les cryptomonnaies.
        """
        logger.info("V√©rification des signaux...")
        
        signal_count = 0
        
        for symbol in self.symbols_to_monitor:
            try:
                signals = self.signal_detector.detect_signals(symbol, self.timeframe)
                
                # V√©rifier si un nouveau signal a √©t√© d√©tect√©
                if signals["last_signal"] and signals["last_signal"]["signal"] != 0:
                    current_signal = signals["last_signal"]["signal"]
                    
                    # V√©rifier si c'est un nouveau signal
                    if symbol not in self.last_signals or self.last_signals[symbol] != current_signal:
                        self.last_signals[symbol] = current_signal
                        
                        # Envoyer une notification Discord
                        self.discord_notifier.send_signal_notification(symbol, signals)
                        signal_count += 1
                        
                        logger.info(f"Nouveau signal d√©tect√© pour {symbol}: {'ACHAT' if current_signal == 1 else 'VENTE'}")
            except Exception as e:
                logger.error(f"Erreur lors de la v√©rification des signaux pour {symbol}: {e}")
            
            # Pause pour √©viter de surcharger le processeur
            time.sleep(0.5)
        
        logger.info(f"V√©rification termin√©e: {signal_count} nouveaux signaux d√©tect√©s")
    
    def send_status_report(self):
        """
        Envoie un rapport d'√©tat du service.
        """
        try:
            # R√©cup√©rer un r√©sum√© des signaux
            summary = self.signal_detector.get_signals_summary()
            
            # Cr√©er le message
            message = f"üìä **Rapport d'√©tat TvBin**\n\n"
            message += f"üîç **Symboles surveill√©s:** {len(self.symbols_to_monitor)}\n"
            message += f"üìà **Signaux haussiers:** {summary['bullish_signals']}\n"
            message += f"üìâ **Signaux baissiers:** {summary['bearish_signals']}\n"
            message += f"üìÖ **Dernier signal:** {summary['last_signal_date'] or 'Aucun'}\n"
            message += f"‚è±Ô∏è **Derni√®re v√©rification:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            
            # Envoyer le message
            self.discord_notifier.send_message(message)
            
            logger.info("Rapport d'√©tat envoy√©")
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi du rapport d'√©tat: {e}")
    
    def start(self):
        """
        D√©marre le service de surveillance.
        """
        if self.is_running:
            logger.warning("Le service est d√©j√† en cours d'ex√©cution")
            return
        
        self.is_running = True
        self.monitoring_thread = threading.Thread(target=self._run)
        self.monitoring_thread.daemon = True
        self.monitoring_thread.start()
        
        logger.info("Service de surveillance d√©marr√©")
        
        # Envoyer une notification de d√©marrage
        self.discord_notifier.send_message("üöÄ **TvBin d√©marr√©**\n\nLe service de surveillance des cryptomonnaies est maintenant actif.")
    
    def stop(self):
        """
        Arr√™te le service de surveillance.
        """
        if not self.is_running:
            logger.warning("Le service n'est pas en cours d'ex√©cution")
            return
        
        self.is_running = False
        
        if self.monitoring_thread:
            self.monitoring_thread.join(timeout=5)
        
        logger.info("Service de surveillance arr√™t√©")
        
        # Envoyer une notification d'arr√™t
        self.discord_notifier.send_message("üõë **TvBin arr√™t√©**\n\nLe service de surveillance des cryptomonnaies a √©t√© arr√™t√©.")
    
    def _run(self):
        """
        Boucle principale du service de surveillance.
        """
        # Ex√©cuter une mise √† jour initiale
        self.update_all_crypto_data()
        
        # Ex√©cuter une v√©rification initiale
        self.check_signals()
        
        while self.is_running:
            try:
                # Ex√©cuter les t√¢ches planifi√©es
                schedule.run_pending()
                
                # Pause pour √©viter de surcharger le processeur
                time.sleep(60)
            except Exception as e:
                logger.error(f"Erreur dans la boucle principale: {e}")
                
                # Pause plus longue en cas d'erreur
                time.sleep(300)