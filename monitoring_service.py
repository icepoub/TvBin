"""
Service de surveillance pour les cryptomonnaies.
"""
import time
import threading
import logging
import schedule
from datetime import datetime, timedelta
import pytz
from typing import List, Dict, Any, Optional

import config
from signal_detector.detector import SignalDetector
from discord_notifier.notifier import DiscordNotifier
from data_fetcher.fetcher import DataFetcher

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format=config.LOG_CONFIG["format"],
    filename=config.LOG_CONFIG["file"]
)
logger = logging.getLogger(__name__)

class MonitoringService:
    """
    Service de surveillance pour les cryptomonnaies.
    """
    
    def __init__(self, signal_detector: SignalDetector, discord_notifier: DiscordNotifier):
        """
        Initialise le service de surveillance.
        
        Args:
            signal_detector: D√©tecteur de signaux
            discord_notifier: Notifier Discord
        """
        self.signal_detector = signal_detector
        self.discord_notifier = discord_notifier
        self.data_fetcher = DataFetcher()
        self.is_running = False
        self.monitoring_thread = None
        self.symbols_to_monitor = config.CRYPTO_TICKERS
        self.timeframe = "1d"
        self.last_signals = {}
        self.last_update = {}
        self.utc_tz = pytz.timezone('UTC')
        self.setup_schedule()
        logger.info("Service de surveillance initialis√©")
    
    def setup_schedule(self):
        """
        Configure les t√¢ches planifi√©es.
        """
        # Mise √† jour des donn√©es toutes les 12h
        schedule.every(12).hours.do(self.update_all_data)
        
        # V√©rification des signaux toutes les 4h
        schedule.every(4).hours.do(self.check_signals)
        
        # V√©rification de l'√©tat du service toutes les 24h
        schedule.every(24).hours.do(self.send_status_report)
        
        logger.info("T√¢ches planifi√©es configur√©es")
    
    def update_all_data(self):
        """
        Met √† jour les donn√©es pour tous les symboles.
        """
        logger.info("Mise √† jour des donn√©es pour tous les symboles...")
        
        # Limiter le nombre de requ√™tes par minute pour √©viter les limitations d'API
        max_requests_per_minute = config.UPDATE_CONFIG["max_requests_per_minute"]
        request_count = 0
        
        for symbol in self.symbols_to_monitor:
            try:
                # V√©rifier si une mise √† jour est n√©cessaire
                last_update_time = self.last_update.get(symbol)
                now = datetime.now(self.utc_tz)
                
                if (last_update_time is None or 
                    (now - last_update_time) > timedelta(hours=config.UPDATE_CONFIG["min_update_interval_hours"])):
                    
                    # Mettre √† jour les donn√©es
                    self.data_fetcher.get_ticker_data(symbol, self.timeframe, force_refresh=True)
                    self.last_update[symbol] = now
                    
                    # Incr√©menter le compteur de requ√™tes
                    request_count += 1
                    
                    # Pause si on atteint la limite de requ√™tes par minute
                    if request_count >= max_requests_per_minute:
                        logger.info(f"Pause de 60 secondes apr√®s {request_count} requ√™tes")
                        time.sleep(60)
                        request_count = 0
                    else:
                        # Petite pause entre les requ√™tes pour √©viter de surcharger l'API
                        time.sleep(1)
            except Exception as e:
                logger.error(f"Erreur lors de la mise √† jour des donn√©es pour {symbol}: {e}")
        
        logger.info("Mise √† jour des donn√©es termin√©e")
    
    def check_signals(self):
        """
        V√©rifie les signaux pour tous les symboles.
        """
        logger.info("V√©rification des signaux pour tous les symboles...")
        
        for symbol in self.symbols_to_monitor:
            try:
                # D√©tecter les signaux
                signals = self.signal_detector.detect_signals(symbol, self.timeframe)
                
                # V√©rifier si le signal a chang√©
                if (symbol in self.last_signals and 
                    signals["last_signal"] != self.last_signals.get(symbol)):
                    
                    self.last_signals[symbol] = signals["last_signal"]
                    
                    # Envoyer une notification si le signal est non nul
                    if signals["last_signal"] and signals["last_signal"]["signal"] != 0:
                        self.discord_notifier.send_signal_notification(symbol, signals)
                
                # Stocker le dernier signal
                self.last_signals[symbol] = signals["last_signal"]
                
                # Petite pause entre les v√©rifications pour √©viter de surcharger le processeur
                time.sleep(0.5)
            except Exception as e:
                logger.error(f"Erreur lors de la v√©rification des signaux pour {symbol}: {e}")
        
        logger.info("V√©rification des signaux termin√©e")
    
    def send_status_report(self):
        """
        Envoie un rapport d'√©tat du service.
        """
        try:
            # R√©cup√©rer un r√©sum√© des signaux
            summary = self.signal_detector.get_signals_summary()
            
            # Cr√©er le message
            message = f"üìä **Rapport d'√©tat TvBin**\n\n"
            message += f"üïí Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            message += f"üìà Signaux haussiers: {summary['bullish_signals']}\n"
            message += f"üìâ Signaux baissiers: {summary['bearish_signals']}\n"
            message += f"üî¢ Total des signaux: {summary['total_signals']}\n"
            message += f"üîç Symboles surveill√©s: {len(self.symbols_to_monitor)}\n"
            
            # Envoyer le message
            self.discord_notifier.send_message(message)
            
            logger.info("Rapport d'√©tat envoy√©")
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi du rapport d'√©tat: {e}")
    
    def start(self):
        """
        D√©marre le service de surveillance.
        """
        if self.is_running:
            logger.warning("Le service est d√©j√† en cours d'ex√©cution")
            return
        
        self.is_running = True
        self.monitoring_thread = threading.Thread(target=self._run)
        self.monitoring_thread.daemon = True
        self.monitoring_thread.start()
        
        logger.info("Service de surveillance d√©marr√©")
        
        # Envoyer une notification de d√©marrage
        try:
            self.discord_notifier.send_message("üöÄ **Service TvBin d√©marr√©**")
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi de la notification de d√©marrage: {e}")
    
    def stop(self):
        """
        Arr√™te le service de surveillance.
        """
        if not self.is_running:
            logger.warning("Le service n'est pas en cours d'ex√©cution")
            return
        
        self.is_running = False
        
        if self.monitoring_thread:
            self.monitoring_thread.join(timeout=5)
        
        logger.info("Service de surveillance arr√™t√©")
        
        # Envoyer une notification d'arr√™t
        try:
            self.discord_notifier.send_message("üõë **Service TvBin arr√™t√©**")
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi de la notification d'arr√™t: {e}")
    
    def _run(self):
        """
        Boucle principale du service de surveillance.
        """
        # Ex√©cuter une mise √† jour initiale
        self.update_all_data()
        self.check_signals()
        
        while self.is_running:
            try:
                # Ex√©cuter les t√¢ches planifi√©es
                schedule.run_pending()
                
                # Pause pour √©viter de surcharger le processeur
                time.sleep(60)
            except Exception as e:
                logger.error(f"Erreur dans la boucle principale du service: {e}")
                time.sleep(300)  # Pause plus longue en cas d'erreur